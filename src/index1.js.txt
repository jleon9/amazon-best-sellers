import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

/* 
TOPICS: 
  - Nested Components
  -  JSX, and its use of CSS and HTML
  - Props
  - 
*/
//const author = 'Kai Bird';
//const title = 'Openheimer'
//const img = './images/book1.jpg';

const book1 = {
  author: 'Ashleigh Evans',
  title: 'Man with No Yesterdays',
  img: './images/book2.jpg'
}

const book2 = {
  author: 'Kai Bird',
  title: 'Openheimer',
  img: './images/book1.jpg'
}

// WARNING: In React, we CANNOT render objects directly in JSX.
// i.e. a Book object cannot directly be rendered in JSX
const BookList = () => {
  return <section className='BookList'>
    <Book 
      author={book1.author}
      title={book1.title} 
      img={book1.img}
      >
    <p>
      Some description in here...
      Some description in here...
      Some description in here...
      Some description in here...
      Some description in here...
    </p>
    </Book>

    <Book 
      author={book2.author} 
      title={book2.title} 
      img={book2.img}
      />
  </section>;
}

// props stands for properties. 
// Here, the properties of a Book are img, title, author.
const Book = (props) => {
  {/* In this Book class, the field inLineHeadingStyle contains CSS styling information.
      that is then passed to the <h2> styling property. */}
  const inLineHeadingStyle = { 
    color: '#617d98', 
    fontSize:'0.75', 
    marginTop: '0.5rem'
  };

  /* children is a special prop provided by React. 
  It enables the optional use of additional components 
  within the properties of a React component. */
  const {img, title, author, children} = props;
  return (
  <article className='Book'>
    <img src={img} alt={title} />
    <h2>{title}</h2>
    {children}
    <h2 style={inLineHeadingStyle}>
      {author}
    </h2>
    
  </article>
  );
}

/* Now, instead of declaring different objects and rendering them separately,
   we are initializing a list of these objects. Then, we map them to HTML elements that contain their data using the .map(()=>) method,
   and we render a JSX element containing the list of mapped HTML elements. */
const names = ['John', 'Jean', 'Camelia'];
const newNames = names.map((name) => {
  return <h1>{name}</h1>;
});
console.log(newNames);
function renderNamesList() {
  return <section className='BookList'>{newNames}</section>;
};

/* */

/*
const Book = () => {
  return (
  <article className='Book'>
    <Image/>
    <Title/>
    <Author/>
  </article>
  );
};


const Image = () => <img src="./images/book1.jpg"/>
const Title = () => {
  const title = 'American Prometheus: The Triumph and Tragedy of J. Robert Oppenheimer'
  return <h2>
  {title}
  </h2>
}
const Author = () => {
  /* Instead of hardcoding the HTML elements, 
  we dynamically insert them as JS elements
  
  const author = 'Kai Bird';
  const inLineHeadingStyle = { 
    color: '#617d98', 
    fontSize:'0.75', 
    marginTop: '0.5rem'
  };
  return <h4 style={inLineHeadingStyle}>
    {author}
  </h4>;
}*/

const root = ReactDOM.createRoot(document.getElementById('root'));

/* List of render objects */
//root.render(<BookList/>);
root.render(renderNamesList());