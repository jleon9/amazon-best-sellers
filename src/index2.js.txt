import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const book1 = {
    author: 'Ashleigh Evans',
    title: 'Man with No Yesterdays',
    img: './images/book2.jpg',
    id: 1
  }
  
  const book2 = {
    author: 'Kai Bird',
    title: 'Openheimer',
    img: './images/book1.jpg',
    id: 2
  }
  

// Destructuring the object in the function paramters
const Book = (props/*{book: {img, title, author, children}}*/) => {
    // Another way to destructure:
    //const {img, title, author, children} = props.book;
    const {img, title, author, displayValue, getBook, id, children} = props
    // In React, components are by default independent.
    // A nested component is limited to the scope of its outer component
    const displayTitle = () => {
        console.log(title);
    }

    // For getBook(id) to be called ONLY onClick, we use the getSingleBook
    // wrapper method. 
    // An anonymous arrow function within the onClick property also works.
    const getSingleBook = () => {
        getBook(id);
    }
    return (
    <article className='Book'>
        <img src={img} alt={title}/>
        <h1>{title}</h1>
        <h2>{author}</h2>
        <div>
            <button onClick={displayTitle}>Display Title</button>
        </div>
        <div>
            <button onClick={displayValue}>ShakeAndBake</button>
        </div>
        <div>
            <button onClick={getSingleBook}>bookId</button>
        </div>
        {children}
    </article>)
}

const books = [book1, book2];

const BookList = () => {
    const someValue = 'shakeAndBake';
    const displayValue = () => {
        console.log(someValue);
    }

    const getBook = (id) => {
        const book = books.find((book) => book.id === id);
        console.log(book);
    }
    

    // Props are ALWAYS passed down (i.e. from ancestor to descendent)
    // In this example, the displayValue prop is passed from BookList to Book.
    // This concept of passing down props is called 'props drilling'
    return (
        <section className='BookList'>
            <EventExamples/>
            {books.map((book) => {
                //const {img,title,author,id} = book;
                // return <Book book={book} key={id}
                // Destructuring the object with the ... spread operator (preferred technique).
                return <Book {...book} key={book.id} displayValue={displayValue} getBook={getBook}/>;
            })}
        </section>
    );
}

const btn = document.getElementById('btn');
/*btn.addEventListener('click', function(e) {
    // access event object
    // do something when event fires
    
});*/

// Let's listen for events to make our app more interactive
const EventExamples = () => {

    const handleFormInput = (e) => {
        console.log(e.target); // e.target is our event's html input element
        console.log(e.target.name); // e.target.name is the name attribute's value of our input, in this case 'example'
        console.log(e.target.value); // e.target.value is our user input value
        console.log('handle form input');
    }

    const handleFormSubmission = (e) => {
        e.preventDefault();
        console.log('Form Submitted');
    }

    const handleButtonClick = () => {
        alert('handle button click');
    }
    /* Two ways to handle events:
    - With arrow functions (i.e. (e) => console.log(e.target.value))
    - With callback functions (i.e. handleButtonClick)
    */
    return (
        <section>
            {/* Submits the form when the 'enter' key is pressed*/}
            <form /*onSubmit={handleFormSubmission}*/>
                <h2>Typical Form</h2>
                <input 
                    type='text'
                    name='example'
                    onChange=/*{handleFormInput}*/{(e) => console.log(e.target.value)}
                    style={{ margin: '1rem 0' }}
                />
                <button type='button' onClick={() =>console.log('click me')}>click me</button>
            <div>
                {/* Submits the form when the submit button is clicked*/}
                <button type='submit' onClick={handleButtonClick}> 
                    submit
                </button>
            </div>
            </form>
        </section>
    );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList/>);

